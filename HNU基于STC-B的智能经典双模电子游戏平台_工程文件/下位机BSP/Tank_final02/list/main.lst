C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE source\main.c BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRINT(.\list\main.lst
                    -) TABS(2) OBJECT(.\output\main.obj)

line level    source

   1          #include "STC15F2K60S2.H"
   2          #include "sys.H"
   3          #include "adc.h"   
   4          #include "displayer.H"
   5          #include "key.H"
   6          #include "uart1.h"  
   7          #include "beep.h"// ?????????
   8          #include "hall.h"
   9          #include "vib.h"
  10          #include "IR.h"
  11          #include "FM_radio.h"
  12          
  13          code unsigned long SysClock = 11059200L; // ????????
  14          
  15          #ifdef _displayer_H_                          //??????????(????????,?????????) 
  16          code char decode_table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00,0x08,0x40,0x01,0x41,0x48,
             -0x76,0x38,0x40,0x00,  
  17                          /* ??:   0    1    2     3    4     5    6    7   8     9     10  11   12   13   14   15    16  
             - 17   18   19   */
  18                          /* ??:   0    1    2     3    4     5    6    7   8    9  (?)   ?-  ?-  ?-  ??-  ??-  H   
             - L    -   (?)*/  
  19                                   0x3f|0x80,0x06|0x80,0x5b|0x80,0x4f|0x80,0x66|0x80,0x6d|0x80,0x7d|0x80,0x07|0x80,0x
             -7f|0x80,0x6f|0x80 ,0x54,0x3e,0x39,0x79};  
  20                       /* ????     20         21         22         23      24        25        26        27        
             -28        29        30n  31U 32C 33E */
  21          #endif
  22           
  23          //unsigned char temp[] = {0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03};  // LED pattern
  24          int i = 3;  // Start index
  25          unsigned char key_press_flag = 0;  // Key press flag for debouncing
  26          
  27          // ???????PC
  28          void send_key_signal(unsigned char key) {
  29   1          SBUF = key;  // ????????????
  30   1          while (!TI); // ??????
  31   1          TI = 0;      // ??????
  32   1      }
  33          
  34          
  35          // ??????
  36          void mydh_callback() {
  37   1          // ?????????
  38   1          if (GetAdcNavAct(enumAdcNavKeyLeft) == enumKeyPress) {
  39   2              
  40   2                  key_press_flag = 1;  // ????
  41   2                  Seg7Print(3, 0, 0, 0, 0, 0, 0, 0);  // ???????3
  42   2                  send_key_signal(3);  // ??????
  43   2              
  44   2          }
  45   1          // ?????????
  46   1          else if (GetAdcNavAct(enumAdcNavKeyRight) == enumKeyPress) {
  47   2              
  48   2                 
  49   2                  key_press_flag = 1;  // ????
C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 2   

  50   2                  Seg7Print(4, 0, 0, 0, 0, 0, 0, 0);  // ???????4
  51   2                  send_key_signal(4);  // ??????
  52   2              
  53   2          }
  54   1          // ?????????
  55   1          else if (GetAdcNavAct(enumAdcNavKeyUp) == enumKeyPress) {
  56   2              key_press_flag = 1;  // ????
  57   2              Seg7Print(1, 0, 0, 0, 0, 0, 0, 0);  // ???????1
  58   2              send_key_signal(1);  // ??????
  59   2          }
  60   1          // ?????????
  61   1          else if (GetAdcNavAct(enumAdcNavKeyDown) == enumKeyPress) {
  62   2              key_press_flag = 1;  // ????
  63   2              Seg7Print(2, 0, 0, 0, 0, 0, 0, 0);  // ???????2
  64   2              send_key_signal(2);  // ??????
  65   2          }
  66   1          // Center/Hall/Vib ==> tank stop
  67   1              else if ((GetAdcNavAct(enumAdcNavKeyCenter) == enumKeyPress)||(GetHallAct() == enumHallGetClose) |
             -|(GetVibAct()==enumVibQuake)) {
  68   2              key_press_flag = 1;  // ????
  69   2              Seg7Print(5, 0, 0, 0, 0, 0, 0, 0);  // ???????5
  70   2              send_key_signal(5);  // ??????
  71   2          }
  72   1          else if (GetKeyAct(enumKey1) == enumKeyPress) {
  73   2              key_press_flag = 1;  // ????
  74   2              Seg7Print(6, 0, 0, 0, 0, 0, 0, 0);  // ???????5
  75   2              send_key_signal(6);  // ??????
  76   2          }
  77   1      
  78   1          // ????????????
  79   1          /*if (key_press_flag) {
  80   1              LedPrint(temp[i]);  // ??LED??
  81   1              key_press_flag = 0;  // ????
  82   1          }*/
  83   1      }
  84          
  85          char rxd[1];
  86          char R[1];
  87          char bee[1];
  88          char buf1[1]={0x03};
  89          char buf2[1]={0x04};
  90          char buf3[1]={0x01};
  91          char buf4[1]={0x02};
  92          char buf5[1]={0x05};
  93          char buf6[1]={0x06};
  94          //char matchhead[2]={0xaa,0x55};
  95           
  96          void uart1rxd_callback();
  97          void ir_callback();
  98          void key_callback();
  99          void adc1ms_callback();
 100          void displayer1s_callback();
 101          
 102          unsigned int adc_10bit = 0;     //????adc 10bit
 103          unsigned long sumt = 0;       //??
 104          unsigned int data_temp = 0;     //???????
 105          unsigned int t = 0;         //??
 106          unsigned int flag;          //???
 107          int temp = 0;
 108          struct_ADC adc_data;      
 109          unsigned int light=0;//Rop
 110          int code tempdata[]={239,197,175,160,150,142,135,129,124,120,116,113,109,107,104,101, 
C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 3   

 111                                99, 97, 95, 93, 91, 90, 88, 86, 85, 84, 82, 81, 80, 78, 77, 76, 
 112                                75, 74, 73, 72, 71, 70, 69, 68, 67, 67, 66, 65, 64, 63, 63, 62, 
 113                                61, 61, 60, 59, 58, 58, 57, 57, 56, 55, 55, 54, 54, 53, 52, 52, 
 114                                51, 51, 50, 50, 49, 49, 48, 48, 47, 47, 46, 46, 45, 45, 44, 44, 
 115                                43, 43, 42, 42, 41, 41, 41, 40, 40, 39, 39, 38, 38, 38, 37, 37, 
 116                                36, 36, 36, 35, 35, 34, 34, 34, 33, 33, 32, 32, 32, 31, 31, 31, 
 117                                30, 30, 29, 29, 29, 28, 28, 28, 27, 27, 27, 26, 26, 26, 25, 25,
 118                                24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 
 119                                19, 19, 18, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 14, 14, 14, 
 120                                13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 7, 
 121                                7, 7, 6, 6,5, 5, 54,4, 3, 3,3, 2, 2, 1, 1, 1, 0, 0, -1, -1, -1, 
 122                                -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, 
 123                                -10, -10, -11, -11, -12, -13, -13, -14, -14, -15, -16, -16, -17, 
 124                                -18, -19, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, 
 125                                -30, -32, -33, -35, -36, -38, -40, -43, -46, -50, -55, -63, 361};
 126          unsigned int ktwo = 0;
 127          unsigned int move = 0;
 128          //void beep_callback();
 129          struct_FMRadio radio = {975,6,1,0,0};
 130          void main() {
 131   1            HallInit(); 
 132   1            VibInit(); 
 133   1          DisplayerInit();
 134   1          KeyInit();
 135   1        
 136   1         
 137   1          FMRadioInit(radio);
 138   1      
 139   1            IrInit(NEC_R05d);
 140   1            BeepInit();
 141   1          AdcInit(ADCexpEXT);
 142   1          SetDisplayerArea(0, 7);
 143   1          
 144   1          Uart1Init(9600);  // ?????,????9600
 145   1          
 146   1          SetUart1Rxd(rxd, 1, 0, 0);
 147   1            SetIrRxd(R,1);
 148   1          
 149   1            bee[0]=rxd[0];
 150   1              //Seg7Print(10,10,10,10,10,10,10,10);
 151   1          LedPrint(0);
 152   1          
 153   1          
 154   1         // Seg7Print(0, 0, 0, 0, 0, 0, 0, 0);  // ??????
 155   1          Seg7Print(16,30,31,12,32,5,33,33);//display "HnU-C5EE"
 156   1          SetEventCallBack(enumEventXADC, mydh_callback);
 157   1          SetEventCallBack(enumEventUart1Rxd, uart1rxd_callback);
 158   1            SetEventCallBack(enumEventIrRxd,ir_callback);
 159   1            //key -->ADC
 160   1            SetEventCallBack(enumEventXADC,key_callback);
 161   1            
 162   1            SetEventCallBack(enumEventSys1mS,adc1ms_callback);//get light and temperature
 163   1            SetEventCallBack(enumEventSys1S,displayer1s_callback);//display 0--7
 164   1      
 165   1          MySTC_Init();
 166   1          
 167   1          while (1) {
 168   2              MySTC_OS();  // ???????
 169   2          }
 170   1      }
 171          void uart1rxd_callback(){
 172   1          LedPrint(rxd[0]);
C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 4   

 173   1            if ((rxd[0] == 07 || rxd[0] == 03 || rxd[0] == 01) && bee[0] != rxd[0]) {
 174   2              SetBeep(1000, 20);
 175   2          }
 176   1          if (rxd[0] == 00 && bee[0] != rxd[0]) {
 177   2              SetBeep(200, 100);
 178   2          }
 179   1                  
 180   1              bee[0]=rxd[0];
 181   1              
 182   1          return;
 183   1      }
 184          
 185          void ir_callback(){
 186   1            if (R[0]==3){
 187   2            key_press_flag = 1;  // ????
 188   2                  Seg7Print(3, 0, 0, 0, 0, 0, 0, 0);  // ???????3
 189   2                  send_key_signal(3);  // ??????
 190   2              
 191   2          }
 192   1          // ?????????
 193   1          else if (R[0]==4) {           
 194   2                  key_press_flag = 1;  // ????
 195   2                  Seg7Print(4, 0, 0, 0, 0, 0, 0, 0);  // ???????4
 196   2                  send_key_signal(4);  // ??????
 197   2              
 198   2          }
 199   1          // ?????????
 200   1          else if (R[0]==1) {
 201   2              key_press_flag = 1;  // ????
 202   2              Seg7Print(1, 0, 0, 0, 0, 0, 0, 0);  // ???????1
 203   2              send_key_signal(1);  // ??????
 204   2          }
 205   1          // ?????????
 206   1          else if (R[0]==2) {
 207   2              key_press_flag = 1;  // ????
 208   2              Seg7Print(2, 0, 0, 0, 0, 0, 0, 0);  // ???????2
 209   2              send_key_signal(2);  // ??????
 210   2          }
 211   1          // ?????????
 212   1              else if (R[0]==5) {
 213   2              key_press_flag = 1;  // ????
 214   2              Seg7Print(5, 0, 0, 0, 0, 0, 0, 0);  // ???????5
 215   2              send_key_signal(5);  // ??????
 216   2          }
 217   1          else if (R[0]==6) {
 218   2              key_press_flag = 1;  // ????
 219   2              Seg7Print(6, 0, 0, 0, 0, 0, 0, 0);  // ???????5
 220   2              send_key_signal(6);  // ??????
 221   2          }
 222   1          }
 223          
 224          void key_callback(){
 225   1          if(GetAdcNavAct(enumAdcNavKeyLeft) == enumKeyPress)
 226   1          {
 227   2            send_key_signal(3);  // ??????
 228   2            IrPrint(buf1, 1);
 229   2            move = 3;
 230   2          }
 231   1              
 232   1          else if(GetAdcNavAct(enumAdcNavKeyRight) == enumKeyPress)
 233   1          {
 234   2            IrPrint(buf2, 1);
C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 5   

 235   2            send_key_signal(4);  // ??????
 236   2            move =4 ;
 237   2          }
 238   1              
 239   1          else if(GetAdcNavAct(enumAdcNavKeyUp) == enumKeyPress)
 240   1          {
 241   2            IrPrint(buf3, 1);
 242   2            send_key_signal(1);  // ??????
 243   2            move =1 ;
 244   2          }
 245   1              
 246   1          else if(GetAdcNavAct(enumAdcNavKeyDown) == enumKeyPress)
 247   1          {
 248   2             send_key_signal(2);  // ??????
 249   2            IrPrint(buf4, 1);
 250   2            move = 2;
 251   2            
 252   2          }
 253   1              
 254   1          /*else if(GetKeyAct(enumKey2) == enumKeyPress)
 255   1          {
 256   1              IrPrint(buf5, 1);
 257   1              send_key_signal(5);  // ??????
 258   1          }*/
 259   1              
 260   1          else if(GetKeyAct(enumKey1) == enumKeyPress)
 261   1          {
 262   2             IrPrint(buf6, 1);
 263   2            move = 6;
 264   2              send_key_signal(6);  // ??????
 265   2          }
 266   1          else if ((GetAdcNavAct(enumAdcNavKeyCenter) == enumKeyPress)||(GetHallAct() == enumHallGetClose) ||(GetV
             -ibAct()==enumVibQuake)) {
 267   2              
 268   2              Seg7Print(5, 0, 0, 0, 0, 0, 0, 0);  // ???????5
 269   2            move = 5;
 270   2              send_key_signal(5);  // ??????
 271   2              IrPrint(buf5, 1);
 272   2          }
 273   1              
 274   1      }
 275          void adc1ms_callback(){
 276   1        t++;
 277   1        if(t==200){
 278   2            data_temp=(sumt+t/2)/t;         //????
 279   2            temp=tempdata[data_temp-1];       //?????AD????
 280   2            if(temp<0){
 281   3              flag = 12;              //?????,????
 282   3            }
 283   2            else{
 284   3              flag = 0;
 285   3            }
 286   2            sumt=0;
 287   2            t=0;
 288   2        }
 289   1        adc_data = GetADC();
 290   1        adc_10bit = adc_data.Rt;
 291   1        data_temp=adc_10bit>>2;             //?10?AD????8?AD?
 292   1        sumt+=data_temp;                //?t?AD???
 293   1        //light
 294   1        light = adc_data.Rop;
 295   1        if (ktwo == 0)
C51 COMPILER V9.51   MAIN                                                                  09/03/2024 11:55:56 PAGE 6   

 296   1        {
 297   2          //light
 298   2          send_key_signal(light);
 299   2        }
 300   1          
 301   1        //send_key_signal(5);
 302   1        //Seg7Print(light/100,light/10%10,light%10,0,6,flag,temp/10,temp%10);
 303   1      }
 304          void displayer1s_callback(){
 305   1        if (GetKeyAct(enumKey2) == enumKeyPress && ktwo!=2)
 306   1          ktwo = 2;
 307   1        
 308   1        if (ktwo == 2)
 309   1        
 310   1        {
 311   2          Seg7Print(light/100,light/10%10,light%10,0,move,flag,temp/10,temp%10);
 312   2        }
 313   1          
 314   1        else
 315   1          Seg7Print(16,30,31,12,32,5,33,33);//display "HnU-C5EE"
 316   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1252    ----
   CONSTANT SIZE    =    546    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
